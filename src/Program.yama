namespace "Program"
{
    using "System";
    using "System.IO";
    using "System.Time";
    using "ARM.CortexM";
    using "ARM.CortexM.Advanced";
    using "Ps2";

    public class Program
    {

        #region get/set

        #endregion get/set

        static bool Init()
        {
            Gpio port = IORegister.PortA (  );
            Gpio portC = IORegister.PortC (  );
            ResetAndClockControl rcc = IORegister.Rcc (  );

            rcc.EnableGpioPorts ( 0xf );
            port.InitPort ( 1, PinMode.Read );
            port.InitPort ( 3, PinMode.Read );
            port.InitPort ( 4, PinMode.Write );
            port.InitPort ( 5, PinMode.Write );

            portC.InitPort ( 13, PinMode.Read );
        }

        static Ps2InterfaceClient InitPs2Interface()
        {
            Gpio port = IORegister.PortA (  );

            GpioPin clock_input = new GpioPin(port, 1);
            GpioPin data_input = new GpioPin(port, 3);
            GpioPin clock_output = new GpioPin(port, 4);
            GpioPin data_output = new GpioPin(port, 5);

            return new Ps2InterfaceClient ( clock_input, data_input, clock_output, data_output );
        }

        static int main (  )
        {
            Program.Init();

            Ps2InterfaceClient ps2Interface = Program.InitPs2Interface();
            ps2Interface.InitialState (  );

            ps2Interface.Send ( Ps2Command.BatSucess );

            while (true)
            {
                if (!Program.Loop ( ps2Interface )) continue;
            }

            return 0;
        }

        #region ctor

        #endregion ctor

        #region methods

        public static bool Receive ( Ps2InterfaceClient ps2Interface )
        {
            int cmd = ps2Interface.Receive (  );

            if (!cmd) return false;
            if (cmd == 0x100) return false;

            ps2Interface.Send ( Ps2Command.Acknowledge );

            return true;
        }

        public static bool Loop ( Ps2InterfaceClient ps2Interface )
        {
            if ( !ps2Interface.InitialState (  ) ) return false;

            if ( ps2Interface.IsRequestToSendFromHost (  ) ) return Program.Receive ( ps2Interface );

            return true;
        }

        #endregion methods

    }

}